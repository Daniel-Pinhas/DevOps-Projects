pipeline {
    agent any

    environment {
        // Initialize the initial version tag
        repositoryName = 'flask'
        dockerHubUsername = 'danielpinhas'
        IPtest = '18.221.53.201'
        IPprod = '3.137.162.209'
    }

    stages {
        stage('Clean Up & Clone') {
            steps {
                sh 'sudo rm -rf *'
                sh 'git clone https://github.com/Daniel-Pinhas/DevOps-Projects.git'
                echo 'Clean Up & Clone Stage Completed'
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir('DevOps-Projects/Pipline-Docker/Flask-Project/') {
                    sh '''
                    chmod +x manageVersion.py
                    python3 manageVersion.py
                    '''
                }
                echo 'Build and Push Docker Image Stage Completed'
            }
        }

        stage('Deploy Docker into EC2 Test-Servers') {
            steps {
                script {

                    def sshCommand = "ssh -i /var/lib/jenkins/.ssh/dan.pem -o StrictHostKeyChecking=no ec2-user@${IPtest}"
                    sh """
                        ${sshCommand} sudo yum update -y
                        ${sshCommand} sudo yum install docker -y
                        ${sshCommand} sudo service docker start
                        ${sshCommand} sudo systemctl start docker
                        ${sshCommand} sudo docker pull ${dockerHubUsername}/${repositoryName}:latest
                        ${sshCommand} sudo lsof -Pi :5000 -sTCP:LISTEN -t >/dev/null && sudo docker kill flask || (${sshCommand} sudo docker rm -f flask; ${sshCommand} docker run -d -p 5000:5000 --name flask ${dockerHubUsername}/${repositoryName}:latest)
                    """
                }
            }
        }

        stage('Testing Test-Server') {
            steps {
                dir('DevOps-Projects/Pipline-Docker/tests/') {
                sh 'bash test.sh'
            }
        }
    }
        stage('Deploy Docker into EC2 Prod-Servers') {
            steps {
                script {
                    def sshCommand = "ssh -i /var/lib/jenkins/.ssh/dan.pem -o StrictHostKeyChecking=no ec2-user@${IPprod}"
                    sh """
                        ${sshCommand} sudo yum update -y
                        ${sshCommand} sudo yum install docker -y
                        ${sshCommand} sudo service docker start
                        ${sshCommand} sudo systemctl start docker
                        ${sshCommand} sudo usermod -a -G docker ec2-user
                        ${sshCommand} sudo docker pull ${dockerHubUsername}/${repositoryName}:latest
                        ${sshCommand} sudo lsof -Pi :5000 -sTCP:LISTEN -t >/dev/null && sudo docker kill flask || (${sshCommand} sudo docker rm -f flask; ${sshCommand} docker run -d -p 5000:5000 --name flask ${dockerHubUsername}/${repositoryName}:latest)
                    """
                }
            }
        }

        stage('Testing prod-Server') {
            steps {
                dir('DevOps-Projects/Pipline-Docker/tests/') {
                sh 'bash prod.sh'
                }
            }
        }
    }
}
